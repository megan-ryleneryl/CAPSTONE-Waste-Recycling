CAPSTONE-Waste-Recycling Project Structure
=============================================

Root Directory:
├── .git/                          # Git version control files
├── archive/                       # Archived or backup files
├── client/                        # Frontend application files (React/Vue/Angular)
├── config/                        # Configuration files
│   ├── firebase.js                # Firebase initialization and setup
│   └── serviceAccountKey.json     # Firebase admin credentials (downloaded from Firebase Console)
├── controllers/                   # API route handlers and business logic
├── documentation/                 # Project documentation, API docs, setup guides
├── middleware/                    # Express middleware functions (auth, validation, logging)
├── models/                        # Database models and schemas
│   ├── User.js                    # User model with authentication and profile data
│   ├── Application.js             # User application requests (verification, collector privileges)
│   ├── Post.js                    # Base post model (parent class)
│   ├── WastePost.js              # Waste collection posts (inherits from Post)
│   ├── InitiativePost.js         # Community initiative posts (inherits from Post)
│   ├── ForumPost.js              # Discussion forum posts (inherits from Post)
│   ├── Material.js               # Recyclable materials with pricing data
│   ├── Pickup.js                 # Pickup requests and completions
│   ├── Comment.js                # Comments on posts
│   ├── Like.js                   # Post likes and reactions
│   ├── Message.js                # Direct messages between users
│   ├── Notification.js           # In-app notifications
│   ├── Point.js                  # Point transactions and scoring system
│   ├── Badge.js                  # Achievement badges and requirements
│   └── Metric.js                 # Analytics and performance metrics
├── routes/                       # API route definitions and endpoints
├── services/                     # Business logic and external service integrations
│   ├── authService.js            # Firebase authentication management
│   ├── storageService.js         # File upload and storage handling
│   └── notificationService.js    # Push notifications and in-app alerts
├── uploads/                      # Local file storage (user uploads)
│   ├── applications/             # Application documents and verification files
│   ├── pickups/                  # Proof of pickup images and documents
│   ├── badges/                   # Badge icons and images
│   ├── profiles/                 # User profile pictures
│   └── temp/                     # Temporary files (auto-cleanup)
├── .env                          # Environment variables (Firebase config, API keys)
├── .gitignore                    # Git ignore rules for node_modules, logs, etc.
├── app.js                        # Main Express application setup
├── package.json                  # NPM dependencies and scripts
├── package-lock.json             # Locked dependency versions
├── passport-config.js            # Authentication strategy configuration
├── README.md                     # Project documentation and setup instructions
└── server.js                     # Server startup and configuration

Technology Stack:
- Database: Firebase Firestore (NoSQL document database)
- Authentication: Firebase Auth (email/password)
- Backend: Node.js with Express.js
- File Storage: Local filesystem (uploads/ directory)
- Notifications: Firebase Cloud Messaging (FCM)
- Package Manager: NPM

Key Features:
- User registration and authentication
- Waste post creation and management
- Pickup request system
- Point-based gamification
- Badge achievement system
- Real-time notifications
- File upload capabilities
- Admin dashboard functionality
- Community forum features
- Initiative/project coordination

Development Approach:
- Firestore models with inheritance (Post → WastePost/ForumPost/InitiativePost)
- RESTful API design
- Local file storage for development simplicity
- Committed environment files for easy team collaboration
- Professional code structure ready for capstone presentation